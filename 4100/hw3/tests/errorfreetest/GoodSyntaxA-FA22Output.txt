ant -f D:\\JavaProj\\Project3_FA22 -Dnb.internal.action.name=run run
init:
Deleting: D:\JavaProj\Project3_FA22\build\built-jar.properties
deps-jar:
Updating property file: D:\JavaProj\Project3_FA22\build\built-jar.properties
compile:
run:
Student Name, Last 4 of student number, CS4100/5100, FALL 2022
INPUT FILE TO PROCESS IS: d:\GoodSyntaxA-FA22.txt
0001 
0002 UNIT goodtree;
	UNIT | 	0015 | 	UNIT
--> Entering Program
	IDNT | 	0050 | 	goodtree
	SEMI | 	0036 | 	;
0003 
0004 (* This Part A test file should have NO errors! *)
0005 
0006 BEGIN
	BGIN | 	0011 | 	BEGIN
 --> Entering Block
0007 { The only statements for Part A are ASSIGNMENTS with EXPRESSIONS }
0008 
0009 total:=3.14*radius*radius;
	IDNT | 	0050 | 	total
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASGN | 	0037 | 	:=
    <-- Exiting Variable
	FCNS | 	0052 | 	3.14
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
	MULT | 	0031 | 	*
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
      --> Entering Mulop
	IDNT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	MULT | 	0031 | 	*
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	IDNT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	SEMI | 	0036 | 	;
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0010 
0011 a :=(a+c)*(b-d)       ;
	IDNT | 	0050 | 	a
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASGN | 	0037 | 	:=
    <-- Exiting Variable
	LPAR | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	IDNT | 	0050 | 	a
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	PLUS | 	0032 | 	+
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDNT | 	0050 | 	c
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	RPAR | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	MULT | 	0031 | 	*
      <-- Exiting Factor
      --> Entering Mulop
	LPAR | 	0034 | 	(
      <-- Exiting Mulop
      --> Entering Factor
	IDNT | 	0050 | 	b
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	MINS | 	0033 | 	-
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDNT | 	0050 | 	d
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	RPAR | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	SEMI | 	0036 | 	;
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0012 
0013 d1 := -b - ((2+4) + 2*34) * c / 2.5
	IDNT | 	0050 | 	d1
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASGN | 	0037 | 	:=
    <-- Exiting Variable
	MINS | 	0033 | 	-
    --> Entering SimpleExpression
     --> Entering Sign
	IDNT | 	0050 | 	b
     <-- Exiting Sign
     --> Entering Term
      --> Entering Factor
       --> Entering Variable
	MINS | 	0033 | 	-
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	LPAR | 	0034 | 	(
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
	LPAR | 	0034 | 	(
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
	ICNS | 	0051 | 	2
          --> Entering SimpleExpression
           --> Entering Term
            --> Entering Factor
             --> Entering UnsignedConstant
              --> Entering UnsignedNumber
	PLUS | 	0032 | 	+
              <-- Exiting UnsignedNumber
             <-- Exiting UnsignedConstant
            <-- Exiting Factor
           <-- Exiting Term
           --> Entering Addop
	ICNS | 	0051 | 	4
           <-- Exiting Addop
           --> Entering Term
            --> Entering Factor
             --> Entering UnsignedConstant
              --> Entering UnsignedNumber
	RPAR | 	0035 | 	)
              <-- Exiting UnsignedNumber
             <-- Exiting UnsignedConstant
            <-- Exiting Factor
           <-- Exiting Term
          <-- Exiting SimpleExpression
	PLUS | 	0032 | 	+
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	ICNS | 	0051 | 	2
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering UnsignedConstant
           --> Entering UnsignedNumber
	MULT | 	0031 | 	*
           <-- Exiting UnsignedNumber
          <-- Exiting UnsignedConstant
         <-- Exiting Factor
         --> Entering Mulop
	ICNS | 	0051 | 	34
         <-- Exiting Mulop
         --> Entering Factor
          --> Entering UnsignedConstant
           --> Entering UnsignedNumber
	RPAR | 	0035 | 	)
           <-- Exiting UnsignedNumber
          <-- Exiting UnsignedConstant
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	MULT | 	0031 | 	*
      <-- Exiting Factor
      --> Entering Mulop
	IDNT | 	0050 | 	c
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	DIVD | 	0030 | 	/
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	FCNS | 	0052 | 	2.5
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
0014 
0015 end.
	END_ | 	0012 | 	end
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
	PERD | 	0048 | 	.
 <-- Exiting Block
Success.
<-- Exiting Program
Done.
BUILD SUCCESSFUL (total time: 2 seconds)
